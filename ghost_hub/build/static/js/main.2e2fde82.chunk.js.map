{"version":3,"sources":["components/ListCases.js","components/SearchCases.js","components/AddNewCase.js","components/EachCase.js","components/EditEachCase.js","components/NotificationPanel.js","GhostHubBase.js","App.js","reportWebVitals.js","index.js"],"names":["ListCases","url_api","props","state","componentDidMount","a","setState","axios","get","response","data","notification_content","validation","message","onServerError","Fragment","cases_jsx","this","api_data","witness","cases","each_case","each_case_jsx","className","case_title","display_name","generic_description","date","split","onClick","onEnterEachCase","_id","push","page_loaded","display_loading_page","display_api_data","React","Component","entity_tags","map","tag","entity","display_form_search","entity_tags_list_jsx","entity_tags_list","entity_tag","value","onChange","update_multivalue_field","search_entity_tags","name","multiple","aria-label","type","from_date","update_any_field","to_date","search_case","e","target","entity_tags_chosen","console","log","updated_entity_tags_chosen","includes","unchosen_index","indexOf","slice","params","length","case","style","render_items","AddNewCase","add_encounter_validation","error_message","image","new_image","equipment_used","new_equipment_used","contact_type","new_contact_type","time_of_encounter","new_time_of_encounter","number_of_entities","new_number_of_entities","test","parseInt","add_encounter","formated_error_messages","new_encounter","Date","valueOf","Math","floor","random","new_sightings_description","encounters","onListCases","delete_encounter","encounter_delete","encounters_list","index_to_delete","findIndex","encounter","new_encounter_list","edit_mode_activated","sightings_description","edit_mode_cancelled","edit_encounter_validation","edit_image","edit_equipment_used","edit_contact_type","edit_time_of_encounter","edit_number_of_entities","edit_encounter","edited_encounter","edit_mode","edit_sightings_description","index_to_edit","updated_encounters","front_end_validation","age","email_address","location","type_of_activity","submit","error_messages","post","occupation","company_name","add_case","id","encounter_jsx","each_encounter","display_edit_form_encounters","display_form_main","display_added_encounters","display_form_encounters","EachCase","case_id","comments","display_encounters","encounters_jsx","i","src","alt","join","display_added_comments","comment_jsx","comment","each_comment","display_edit_form_comments","Object","keys","content","delete_comment","delete_mode_activated","delete_mode_cancelled","confirm_delete","delete","outcome","add_comment_validation","new_content","add_comment","new_like","new_comment_id","insertedId","new_comment","onComment","comment_delete","comments_list","new_comment_list","like","edit_comment_validation","edit_content","edit_comment","put","edit_like","edited_comment","updated_comments","color","onEditEachCase","class","rows","checked","for","delete_mode","delete_form","display_case","display_form_comments","EditEachCase","encounter_status","DeleteEachCase","className_reveal","role","backgroundColor","onClickPanelDissappear","GhostHubBase","enterEachCase","editEachCase","listCases","searchCases","addNewCase","comment_notification","notification_panel_dissapear","server_error","onSearchCases","displaying","reveal","notification_message","notification_message_color","displayPanel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e2fde82.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nexport default class ListCases extends React.Component {\n\n    url_api = this.props.url_api\n\n    state = {\n        \"page_loaded\":false,\n        \"api_data\": []\n    }\n    \n    componentDidMount=async()=>{\n        try{\n            this.setState({\n                \"page_loaded\":true\n            })\n            let response = await axios.get(this.url_api + \"/cases\")\n            this.setState({\n                'api_data': response.data,\n                \"page_loaded\":false\n            })\n        }catch(e){\n\n\n            let notification_content={\n                validation:false,\n                message:\"Server Error. Please contact the administrator\"\n\n            }\n            this.props.onServerError(notification_content)\n\n\n        }\n\n    }\n\n    display_loading_page(){\n\n        return(\n            <React.Fragment>\n                <h1>LOADING PAGE.</h1>\n                <h2>Please Wait...</h2>\n\n            </React.Fragment>\n        )\n\n\n    }\n\n    display_api_data(){\n    \n        let cases_jsx=[]\n\n        for(let witness of this.state.api_data){\n\n            for(let each_case of witness.cases){\n\n                let each_case_jsx=(\n                    <React.Fragment key={each_case._id}>\n                        <section className=\"panel\">\n                            <div className=\"panel-head\">\n                                <h2 className=\"panel-title\">{each_case.case_title}</h2>\n                                <h2 className=\"panel-display-name\">By: {witness.display_name}</h2> \n                            </div>\n                            <div className=\"panel-line\"></div>\n                            <div className=\"panel-main my-4\">\n                                <label className=\"labels\">Description</label>\n                                <p className=\"panel-description\">{each_case.generic_description}</p>\n                                <label className=\"labels\">Date of Encounter</label>\n                                <p>{each_case.date.split(\"T\")[0]}</p>\n                            </div>\n                            <div className=\"panel-button-group\">\n                                <button className=\"btn btn-md panel-button\" onClick={()=>{this.props.onEnterEachCase({},each_case._id)}}>Continue...</button>\n                            </div>\n                        </section>\n                    </React.Fragment>\n\n                )\n\n                cases_jsx.push(each_case_jsx)\n            }\n\n\n\n\n        }\n\n    \n        return cases_jsx\n\n\n    }\n\n\n    render() {\n        \n        return (<React.Fragment>\n            <section className=\"panel panel-page-title\">\n                <h1>Cases</h1>\n            </section>\n            <main>\n                {this.state.page_loaded?this.display_loading_page():this.display_api_data()}\n            </main>\n        </React.Fragment>)\n    }\n\n\n\n\n\n\n\n}","import React from 'react'\nimport axios from 'axios'\nexport default class ListCases extends React.Component {\n\n    url_api = this.props.url_api\n\n    state = {\n        \"page_loaded\":false,\n        \"entity_tags_list\":[],\n        \"search_entity_tags\":[],\n        \"from_date\":\"\",\n        \"to_date\":\"\",\n        \"api_data\":[]\n\n    }\n\n    componentDidMount=async()=>{\n        try{\n            this.setState({\n                \"page_loaded\":true\n            })\n            let entity_tags = await axios.get(this.props.url_api + \"/list_entity_tags\")\n            //add default tag\n            entity_tags.data.map(tag=>{\n\n                if(tag.entity==\"Others\"){\n                    this.setState({\n                        \"search_entity_tags\":[tag._id]\n                    })\n                }\n\n\n            })\n             \n            this.setState({\n                \"entity_tags_list\":entity_tags.data,\n                \"page_loaded\":false\n            })\n        }catch(e){\n\n\n            let notification_content={\n                validation:false,\n                message:\"Server Error. Please contact the administrator\"\n\n            }\n            this.props.onServerError(notification_content)\n\n\n        }\n\n    }\n\n    display_loading_page(){\n\n        return(\n            <React.Fragment>\n                <h1>LOADING PAGE.</h1>\n                <h2>Please Wait...</h2>\n\n            </React.Fragment>\n        )\n\n\n    }\n    \n\n    display_form_search=()=>{\n\n        let entity_tags_list_jsx = []\n        \n\n        for (let entity_tag of this.state.entity_tags_list){ \n            entity_tags_list_jsx.push(<option value={entity_tag._id}>{entity_tag.entity}</option>)\n        }\n\n        \n        return(<React.Fragment>\n            <section className=\"panel\">\n                <div className=\"panel-search\">\n                    <div className=\"panel-line\"></div>\n                    <label>Entity Tags:</label>\n                    \n                    <select onChange={this.update_multivalue_field}  value={this.state.search_entity_tags} name=\"search_entity_tags\" className=\"form-select\" multiple aria-label=\"multiple select example\">\n                        {entity_tags_list_jsx}\n                    </select>\n                    <label>From Date: </label>\n                    \n                    <input type=\"date\" name=\"from_date\" className=\"\" value={this.state.from_date} onChange={this.update_any_field} />\n                    <label>To Date: </label>\n                    \n                    <input type=\"date\" name=\"to_date\" className=\"\" value={this.state.to_date} onChange={this.update_any_field} /> \n                </div>\n                <div className=\"panel-button-group\">\n                    <button className=\"btn btn-md panel-button\" onClick={this.search_case}>Search</button>\n                </div>\n            </section>\n\n        </React.Fragment>)\n\n\n\n\n\n    }\n\n\n    update_any_field=(e)=>{\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n\n    update_multivalue_field=(e)=>{\n\n        let entity_tags_chosen=this.state[e.target.name]\n\n        console.log(entity_tags_chosen)\n\n        let updated_entity_tags_chosen = []\n\n        if(entity_tags_chosen.includes(e.target.value)){\n\n            let unchosen_index = entity_tags_chosen.indexOf(e.target.value)\n            updated_entity_tags_chosen = [...entity_tags_chosen.slice(0,unchosen_index), ...entity_tags_chosen.slice(unchosen_index+1)]\n        } else {\n\n            updated_entity_tags_chosen = [...entity_tags_chosen, e.target.value]\n        \n        }\n\n        this.setState({\n\n            [e.target.name]:updated_entity_tags_chosen\n\n        })\n\n\n    }\n\n    display_api_data(){\n    \n        if(this.state.api_data.length!=0){\n            let cases_jsx=[]\n\n            for(let witness of this.state.api_data){\n                \n                let each_case_jsx=(\n                    <React.Fragment key={witness.case._id}>\n                        <section className=\"panel\">\n                            <div className=\"panel-head\">\n                                <h2 className=\"panel-title\">{witness.case.case_title}</h2>\n                                <h2 className=\"panel-display-name\">By: {witness.display_name}</h2> \n                            </div>\n                            <div className=\"panel-line\"></div>\n                            <div className=\"panel-main\">\n                                <p className=\"panel-date\">Date of Encounter: {witness.case.date.split(\"T\")[0]}</p>\n                                <p className=\"panel-description\">{witness.case.generic_description}</p>\n                            </div>\n                            <div className=\"panel-button-group\">\n                                <button className=\"btn btn-md panel-button\" onClick={()=>{this.props.onEnterEachCase({},witness.case._id)}}>Continue...</button>\n                            </div>\n                        </section>\n                    </React.Fragment>)\n\n                    cases_jsx.push(each_case_jsx)\n                \n\n\n\n\n            }\n\n        \n            return cases_jsx\n\n        } else {\n\n            \n\n            return(<React.Fragment>\n                    <div>\n                        <h1 style={{\"opacity\":\"0.3\",\"margin\":\"25% 10%\"}}>Search results will be displayed here.</h1>\n                    </div>\n                </React.Fragment>)\n\n        }\n\n\n    }\n\n   \n\n    search_case= async()=>{\n        try{\n                            \n            let search_case = await axios.get(this.url_api + '/search_cases', {\n\n                params: { \n                    \"search_entity_tags\":this.state.search_entity_tags,\n                    \"from_date\":this.state.from_date,\n                    \"to_date\":this.state.to_date \n                } \n\n            })\n\n\n            if(search_case){\n\n                this.setState({\n                    'api_data': search_case.data,\n                        \n                })\n            }\n\n                \n        \n\n        } catch (e) {\n            \n     \n\n            let notification_content={\n                validation:false,\n                message:\"Server Error. Please contact the administrator\"\n\n            }\n            this.props.onServerError(notification_content)\n\n       \n        }\n\n\n    }\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    render() {\n        \n        let render_items=\"\"\n        if(this.state.page_loaded){\n            render_items=(<React.Fragment>{this.display_loading_page()}</React.Fragment>)\n            \n        }else{\n            render_items=(<React.Fragment>\n                {this.display_form_search()}\n                {this.display_api_data()}\n                </React.Fragment>)\n            \n        }\n\n\n        return (<React.Fragment>\n            <section className=\"panel panel-page-title\">\n                <h1>Search Cases</h1>\n            </section>\n            <main>\n                {render_items}\n            </main>\n        </React.Fragment>)\n    }\n\n\n\n\n\n\n\n}","import React from 'react'\nimport axios from 'axios'\nexport default class AddNewCase extends React.Component {\n\n    url_api = this.props.url_api\n\n    state = {\n        \"entity_tags_list\":[],\n        \"email_address\":\"\",\n        \"display_name\":\"\",\n        \"occupation\":\"\",\n        \"age\":\"\",\n        \"company_name\":\"\",\n        \"case_title\":\"\",\n        \"generic_description\":\"\",\n        \"location\":\"\",\n        \"date\":\"\",\n        \"entity_tags\":[],\n        \"type_of_activity\":\"Accidental\",\n        \"encounters\":[],\n        \"new_image\":\"\",\n        \"new_sightings_description\":\"\",\n        \"new_equipment_used\":[],\n        \"new_contact_type\":[],\n        \"new_number_of_entities\":\"\",\n        \"new_time_of_encounter\":\"Early Morning\",\n        \"edit_mode\":{\n            \"_id\":0\n        },\n        \"edit_image\":\"\",\n        \"edit_sightings_description\":\"\",\n        \"edit_equipment_used\":[],\n        \"edit_contact_type\":[],\n        \"edit_number_of_entities\":0,\n        \"edit_time_of_encounter\":\"\"\n\n   }\n\n    componentDidMount= async() => {\n\n        try{\n            let entity_tags = await axios.get(this.props.url_api + \"/list_entity_tags\")\n            //add default tag\n            entity_tags.data.map(tag=>{\n\n                if(tag.entity==\"Others\"){\n                    this.setState({\n                        \"entity_tags\":[tag._id]\n                    })\n                }\n\n\n            }) \n            \n            this.setState({\n\n                \"entity_tags_list\":entity_tags.data\n\n\n            })\n\n        }catch(e){\n\n\n            let notification_content={\n                validation:false,\n                message:\"Server Error. Please contact the administrator\"\n\n            }\n            this.props.onServerError(notification_content)\n\n\n        }\n    }\n\n\n\n    display_form_main(){\n\n    \n        let entity_tags_list_jsx = []\n\n        for (let entity_tag of this.state.entity_tags_list){\n            entity_tags_list_jsx.push(<option value={entity_tag._id}>{entity_tag.entity}</option>)\n        }\n\n        \n\n        return(\n            <React.Fragment>\n                <main>\n                    <h2>Witness Particulars</h2>\n                    <div id=\"witness\">\n                        <label>Display Name</label>\n                        <input type=\"text\" name=\"display_name\" className=\"form-control\" value={this.state.display_name} onChange={this.update_any_field} />\n                        <label>Ocupation</label>\n                        <input type=\"text\" name=\"occupation\" className=\"form-control\" value={this.state.occupation} onChange={this.update_any_field} />\n                        <label>Age</label>\n                        <input type=\"text\" name=\"age\" className=\"form-control\" value={this.state.age} onChange={this.update_any_field} />\n                        <label>Company Name</label>\n                        <input type=\"text\" name=\"company_name\" className=\"form-control\" value={this.state.company_name} onChange={this.update_any_field} />\n                        <label>Email address</label>\n                        <input type=\"text\" name=\"email_address\" className=\"form-control\" value={this.state.email_address} onChange={this.update_any_field} />\n                    </div>\n                    <div id=\"case\">\n                        <h2>Case Details</h2>\n                        <label>Title</label>\n                            <input type=\"text\" name=\"case_title\" className=\"form-control\" value={this.state.case_title} onChange={this.update_any_field} />\n                        <label>Description</label>\n                            <input type=\"text\" name=\"generic_description\" className=\"form-control\" value={this.state.generic_description} onChange={this.update_any_field} />\n                        <label>Location</label>\n                            <input type=\"text\" name=\"location\" className=\"form-control\" value={this.state.location} onChange={this.update_any_field} />\n                        <label>Date Of Incident: </label>\n                            <input type=\"date\" name=\"date\" className=\"\" value={this.state.date} onChange={this.update_any_field} />\n                        <label>Activity:</label>\n                        <select onChange={this.update_any_field}  value={this.state.type_of_activity} name=\"type_of_activity\" className=\"form-select\" aria-label=\"Default select example\">   \n                            <option value=\"accidental\">Accidental</option>\n                            <option value=\"urbex\">UrbEx</option>\n                            <option value=\"solo\">Solo</option>\n                            <option value=\"paranormal_investigation\">Paranormal Investigation</option>\n                            <option value=\"others\">Others</option>\n                        </select>\n                        <label>Entity Tags:</label>\n                        <select onChange={this.update_multivalue_field}  value={this.state.entity_tags} name=\"entity_tags\" className=\"form-select\" multiple aria-label=\"multiple select example\">\n                            {entity_tags_list_jsx}\n                        </select>\n\n                    </div>\n                </main>\n            </React.Fragment>)\n\n   }\n\n\n    display_added_encounters(){\n\n        let encounter_jsx=[]\n\n        encounter_jsx[0]=(\n            <React.Fragment>\n                <h2>Encounter Details</h2>\n            </React.Fragment>\n        )\n        \n        for(let encounter of this.state.encounters){\n\n            let each_encounter=\"\"\n\n            if(encounter._id==this.state.edit_mode._id && this.state.edit_mode._id != 0){\n\n                each_encounter = (\n                    <React.Fragment key={encounter._id}>\n                        <div>    \n                            {this.display_edit_form_encounters()}\n                        </div>\n                    </React.Fragment>)\n                \n            }else{\n\n                each_encounter = (\n                    <React.Fragment key={encounter._id}>\n                        <div>    \n                            {encounter.image}\n                            {encounter.sightings_description}\n                            {encounter.equipment_used}\n                            {encounter.contact_type}\n                            {encounter.number_of_entities}\n                            {encounter.time_of_encounter}\n                            <button className=\"btn btn-success btn-sm\" onClick={()=>{this.edit_mode_activated(encounter)}}>Edit</button>\n                            <button className=\"btn btn-danger btn-sm mx-1\" onClick={()=>{this.delete_encounter(encounter)}}>Delete</button>\n                        </div>\n                    </React.Fragment>)\n\n\n            }\n\n            encounter_jsx.push(each_encounter)\n        \n        }\n\n\n\n        return encounter_jsx\n\n    }\n\n\n    display_edit_form_encounters(){\n\n        return(\n\n            <React.Fragment>\n                <label>Image</label>\n                <input type=\"text\" name=\"edit_image\" className=\"form-control\" value={this.state.edit_image} onChange={this.update_any_field} />\n                <label>Description</label>\n                <input type=\"text\" name=\"edit_sightings_description\" className=\"form-control\" value={this.state.edit_sightings_description} onChange={this.update_any_field} />\n                <label>Equipment Used</label>\n                <select onChange={this.update_multivalue_field}  value={this.state.edit_equipment_used} name=\"edit_equipment_used\" className=\"form-select\" multiple aria-label=\"multiple select example\">   \n                        <option value=\"Phone Camera\">Phone Camera</option>\n                        <option value=\"Camera (fixed)\">Camera (fixed)</option>\n                        <option value=\"Camera (portable)\">Camera (portable)</option>\n                        <option value=\"Voice Recorder\">Voice Recorder</option>\n                        <option value=\"EMF Recorder\">EMF Recorder</option>\n                        <option value=\"Thermal Camera\">Thermal Camera</option>\n                        <option value=\"Spirit Box\">Spirit Box</option> \n                        <option value=\"Others\">Others</option>\n                        <option value=\"None\">None</option>\n                </select>\n                <label>Contact Type</label>\n                <select onChange={this.update_multivalue_field}  value={this.state.edit_contact_type} name=\"edit_contact_type\" className=\"form-select\" multiple aria-label=\"multiple select example\">   \n                        <option value=\"Visual\">Visual</option>\n                        <option value=\"Audio\">Audio</option>\n                        <option value=\"Verbal\">Verbal</option>\n                        <option value=\"Feel\">Feel</option>\n                </select>\n                <label>Number of Entities Encountered</label>\n                <input type=\"text\" name=\"edit_number_of_entities\" className=\"form-control\" value={this.state.edit_number_of_entities} onChange={this.update_any_field} />\n                <label>Time of Encounter</label>\n                <select onChange={this.update_any_field}  value={this.state.edit_time_of_encounter} name=\"edit_time_of_encounter\" className=\"form-select\" aria-label=\"Default select example\">   \n                        <option value=\"Early Morning\">Early Morning</option>\n                        <option value=\"Dawn\">Dawn</option>\n                        <option value=\"Morning\">Morning</option>\n                        <option value=\"Midday\">Midday</option>\n                        <option value=\"Afternoon\">Afternoon</option>\n                        <option value=\"Dusk\">Dusk</option>\n                        <option value=\"Evening\">Evening</option>\n                        <option value=\"Midnight\">Midnight</option>\n                </select>\n                <button className=\"btn btn-success btn-sm\" onClick={this.edit_mode_cancelled}>Cancel</button>\n                <button className=\"btn btn-success btn-sm\" onClick={this.edit_encounter}>Done!</button>\n\n\n            </React.Fragment>\n\n        )\n\n    }\n\n\n\n    display_form_encounters(){\n\n        \n\n        return(\n            <React.Fragment>\n                <label>Image</label>\n                <input type=\"text\" name=\"new_image\" className=\"form-control\" value={this.state.new_image} onChange={this.update_any_field} />\n                <label>Description</label>\n                <input type=\"text\" name=\"new_sightings_description\" className=\"form-control\" value={this.state.new_sightings_description} onChange={this.update_any_field} />\n                <label>Equipment Used</label>\n                <select onChange={this.update_multivalue_field}  value={this.state.new_equipment_used} name=\"new_equipment_used\" className=\"form-select\" multiple aria-label=\"multiple select example\">   \n                        <option value=\"Phone Camera\">Phone Camera</option>\n                        <option value=\"Camera (fixed)\">Camera (fixed)</option>\n                        <option value=\"Camera (portable)\">Camera (portable)</option>\n                        <option value=\"Voice Recorder\">Voice Recorder</option>\n                        <option value=\"EMF Recorder\">EMF Recorder</option>\n                        <option value=\"Thermal Camera\">Thermal Camera</option>\n                        <option value=\"Spirit Box\">Spirit Box</option> \n                        <option value=\"Others\">Others</option>\n                        <option value=\"None\">None</option>\n                </select>\n                <label>Contact Type</label>\n                <select onChange={this.update_multivalue_field}  value={this.state.new_contact_type} name=\"new_contact_type\" className=\"form-select\" multiple aria-label=\"multiple select example\">   \n                        <option value=\"Visual\">Visual</option>\n                        <option value=\"Audio\">Audio</option>\n                        <option value=\"Verbal\">Verbal</option>\n                        <option value=\"Feel\">Feel</option>\n                </select>\n                <label>Number of Entities Encountered</label>\n                <input type=\"text\" name=\"new_number_of_entities\" className=\"form-control\" value={this.state.new_number_of_entities} onChange={this.update_any_field} />\n                <label>Time of Encounter</label>\n                <select onChange={this.update_any_field}  value={this.state.new_time_of_encounter} name=\"new_time_of_encounter\" className=\"form-select\" aria-label=\"Default select example\">   \n                        <option value=\"Early Morning\">Early Morning</option>\n                        <option value=\"Dawn\">Dawn</option>\n                        <option value=\"Morning\">Morning</option>\n                        <option value=\"Midday\">Midday</option>\n                        <option value=\"Afternoon\">Afternoon</option>\n                        <option value=\"Dusk\">Dusk</option>\n                        <option value=\"Evening\">Evening</option>\n                        <option value=\"Midnight\">Midnight</option>\n                </select>\n                \n                <button className=\"btn btn-success btn-sm\" onClick={this.add_encounter}>Add!</button>\n\n            </React.Fragment>)\n\n    }\n\n\n    update_any_field=(e)=>{\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    update_multivalue_field=(e)=>{\n\n        let entity_tags_chosen=this.state[e.target.name]\n\n        let updated_entity_tags_chosen = []\n\n        if(entity_tags_chosen.includes(e.target.value)){\n\n            let unchosen_index = entity_tags_chosen.indexOf(e.target.value)\n            updated_entity_tags_chosen = [...entity_tags_chosen.slice(0,unchosen_index), ...entity_tags_chosen.slice(unchosen_index+1)]\n        } else {\n\n            updated_entity_tags_chosen = [...entity_tags_chosen, e.target.value]\n        \n        }\n\n        this.setState({\n\n            [e.target.name]:updated_entity_tags_chosen\n\n        })\n\n\n    }\n\n\n\n\n    add_encounter_validation=()=>{\n\n        let error_message=[]\n\n\n        let image=false\n        \n        if(this.state.new_image!=\"\" && this.state.new_image.includes(\"https\")){\n\n            image=true\n\n        } else {\n\n            \n            if(this.state.new_image==\"\"){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Image name is missing</div>\n    \n                </React.Fragment>))\n\n            } else if(!this.state.new_image.includes(\"https\")){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Image must have URL name</div>\n    \n                </React.Fragment>))\n\n\n\n            } \n\n\n        }\n\n\n        let equipment_used=false\n        if(this.state.new_equipment_used.length>0){\n\n            equipment_used=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select at least one equipment</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n        let contact_type=false\n        if(this.state.new_contact_type.length>0){\n\n            contact_type=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select at least 1 contact type</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n        let time_of_encounter=false\n        if(this.state.new_time_of_encounter){\n\n            time_of_encounter=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select 1 time of encounter</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n\n\n\n        let number_of_entities=false\n        if(this.state.new_number_of_entities && /\\d/.test(this.state.new_number_of_entities) && parseInt(this.state.new_number_of_entities)>=1){\n\n            number_of_entities=true\n\n        } else {\n\n            \n\n            if(!this.state.new_number_of_entities){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Number of entities is missing</div>\n    \n                </React.Fragment>))\n\n            }else if(!/\\d/.test(this.state.new_number_of_entities)){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Number of entities must be in numbers</div>\n    \n                </React.Fragment>))\n\n\n\n            }else if(!parseInt(this.state.new_number_of_entities)>=1){\n\n                error_message.push((<React.Fragment>\n\n                    <div>There should be at least 1 entity</div>\n    \n                </React.Fragment>))\n\n\n\n            }\n\n\n        }\n\n        \n\n\n\n        return [image && number_of_entities && equipment_used && contact_type && time_of_encounter?true:false, error_message]\n    }\n\n\n    add_encounter=()=>{\n\n        \n        let [validation, error_messages]=this.add_encounter_validation()\n\n        let formated_error_messages= error_messages.map((error_message)=>{return(<React.Fragment><div>Encounter: {error_message}</div></React.Fragment>)})\n        \n\n        if (validation){\n\n            let new_encounter={\n                \"_id\":\"front_end_id\"+new Date().valueOf()+\"/\"+Math.floor(Math.random()*(10000-1000+1)+1000),\n                \"image\":this.state.new_image,\n                \"sightings_description\":this.state.new_sightings_description,\n                \"equipment_used\":this.state.new_equipment_used,\n                \"contact_type\":this.state.new_contact_type,\n                \"number_of_entities\":this.state.new_number_of_entities,\n                \"time_of_encounter\":this.state.new_time_of_encounter\n    \n            }\n            \n            this.setState({\n                \"encounters\": [...this.state.encounters, new_encounter],\n                \"new_image\":\"\",\n                \"new_sightings_description\":\"\",\n                \"new_equipment_used\":[],\n                \"new_contact_type\":[],\n                \"new_number_of_entities\":0,\n                \"new_time_of_encounter\":\"\"\n            })\n\n\n        }else{\n            let notification_content={\n                validation:false,\n                message:formated_error_messages\n            }\n            this.props.onListCases(notification_content)\n        }\n\n     \n            \n\n\n    }\n        \n        \n    \n\n\n    delete_encounter = (encounter_delete) =>{\n\n        let encounters_list=this.state.encounters\n   \n        let index_to_delete = encounters_list.findIndex(encounter=>encounter._id==encounter_delete._id)\n   \n        let new_encounter_list=[...encounters_list.slice(0,index_to_delete), ...encounters_list.slice(index_to_delete+1)]\n   \n        this.setState({\n   \n           \"encounters\":new_encounter_list\n   \n        })\n   \n   \n   \n    }\n\n\n    edit_mode_activated=(encounter)=>{\n        this.setState({\n\n            \"edit_mode\":encounter,\n            \"edit_image\":encounter.image,\n            \"edit_sightings_description\":encounter.sightings_description,  \n            \"edit_equipment_used\":encounter.equipment_used,\n            \"edit_contact_type\":encounter.contact_type,\n            \"edit_number_of_entities\":encounter.number_of_entities,\n            \"edit_time_of_encounter\":encounter.time_of_encounter\n\n        })\n\n    }\n\n    edit_mode_cancelled=()=>{\n\n        this.setState({\n\n            \"edit_mode\":{\n                \"_id\":0\n            },\n            \"edit_image\":\"\",\n            \"edit_sightings_description\":\"\",\n            \"edit_equipment_used\":[],\n            \"edit_contact_type\":[],\n            \"edit_number_of_entities\":0,\n            \"edit_time_of_encounter\":\"\"\n\n        })\n\n\n\n    }\n\n\n    edit_encounter_validation=()=>{\n\n        let error_message=[]\n\n\n        let image=false\n        \n        if(this.state.edit_image && this.state.edit_image.includes(\"https\")){\n\n            image=true\n\n        } else {\n\n            \n            if(!this.state.edit_image){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Image name is missing</div>\n    \n                </React.Fragment>))\n\n            }else if(!this.state.edit_image.includes(\"https\")){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Image must have URL name</div>\n    \n                </React.Fragment>))\n\n\n\n            } \n\n\n        }\n\n\n        let equipment_used=false\n        if(this.state.edit_equipment_used.length>0){\n\n            equipment_used=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select at least one equipment</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n        let contact_type=false\n        if(this.state.edit_contact_type.length>0){\n\n            contact_type=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select at least 1 contact type</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n        let time_of_encounter=false\n        if(this.state.edit_time_of_encounter){\n\n            time_of_encounter=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select 1 time of encounter</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n\n\n\n        let number_of_entities=false\n        if(this.state.edit_number_of_entities && /\\d/.test(this.state.edit_number_of_entities) && parseInt(this.state.edit_number_of_entities)>=1){\n\n            number_of_entities=true\n\n        } else {\n\n            \n\n            if(!this.state.edit_number_of_entities){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Number of entities is missing</div>\n    \n                </React.Fragment>))\n\n            }else if(!/\\d/.test(this.state.edit_number_of_entities)){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Number of entities must be in numbers</div>\n    \n                </React.Fragment>))\n\n\n\n            }else if(!parseInt(this.state.edit_number_of_entities)>=1){\n\n                error_message.push((<React.Fragment>\n\n                    <div>There should be at least 1 entity</div>\n    \n                </React.Fragment>))\n\n\n\n            }\n\n\n        }\n\n        \n\n\n\n        return [image && number_of_entities && equipment_used && contact_type && time_of_encounter?true:false, error_message]\n    }\n\n    edit_encounter = () =>{\n\n\n        let [validation, error_messages]=this.edit_encounter_validation()\n\n        let formated_error_messages = error_messages.map((error_message)=>{return(<React.Fragment><div>Encounter: {error_message}</div></React.Fragment>)})\n\n        if (validation){\n\n\n            let edited_encounter = {\n                \n                \"_id\":this.state.edit_mode._id,\n                \"image\":this.state.edit_image,\n                \"sightings_description\":this.state.edit_sightings_description,\n                \"equipment_used\":this.state.edit_equipment_used,\n                \"contact_type\":this.state.edit_contact_type,\n                \"number_of_entities\":this.state.edit_number_of_entities,\n                \"time_of_encounter\":this.state.edit_time_of_encounter\n\n            }\n            \n\n\n\n\n            let index_to_edit = this.state.encounters.findIndex( encounter => encounter._id == edited_encounter._id);\n            \n            let updated_encounters = [...this.state.encounters.slice(0, index_to_edit), edited_encounter, ...this.state.encounters.slice(index_to_edit+1)]\n\n            this.setState({\n                \"encounters\": updated_encounters,\n                'edit_mode':{\n                    '_id':0\n                },\n                \"edit_image\":\"\",\n                \"edit_sightings_description\":\"\",\n                \"edit_equipment_used\":[],\n                \"edit_contact_type\":[],\n                \"edit_number_of_entities\":0,\n                \"edit_time_of_encounter\":\"\"\n            })\n\n\n\n\n        \n    \n\n        }else{\n            let notification_content={\n                validation:false,\n                message:formated_error_messages\n            }\n            this.props.onListCases(notification_content)\n        }\n\n\n    }\n\n    \n\n    front_end_validation=()=>{\n\n\n        let error_message=[]\n\n        let  display_name=false\n        if(this.state.display_name){\n\n            display_name=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>The display name is missing</div>\n\n            </React.Fragment>))\n\n\n        }\n        \n        let age=false\n        \n        if(this.state.age && /\\d/.test(this.state.age) && (parseInt(this.state.age)>=10 && parseInt(this.state.age)<=120)){ \n\n            age=true\n\n        } else {\n            if(!this.state.age){\n\n                error_message.push((<React.Fragment>\n\n                    <div>The age is missing</div>\n    \n                </React.Fragment>))\n\n            }else if(!/\\d/.test(this.state.age)){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Age must be a number</div>\n\n                </React.Fragment>))\n\n\n            }else if (!(parseInt(this.state.age)>=10 && parseInt(this.state.age)<=120)){\n                error_message.push((<React.Fragment>\n\n                    <div>Insert a proper age from 10 to 120</div>\n\n                </React.Fragment>))\n            }\n\n        }\n\n        \n\n        let email_address=false\n        if(this.state.email_address && this.state.email_address.includes(\"@\")){\n\n            email_address=true\n\n        } else {\n\n            if(!this.state.email_address){\n                error_message.push((<React.Fragment>\n\n                    <div>The email address is missing</div>\n    \n                </React.Fragment>))\n            } else {\n                error_message.push((<React.Fragment>\n\n                    <div>The email address is inappropriate format</div>\n    \n                </React.Fragment>))\n\n\n            }\n\n\n        }\n\n\n        let case_title=false\n        if(this.state.case_title){\n\n            case_title=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>The case title is missing</div>\n\n            </React.Fragment>))\n\n        }\n\n\n        let location=false\n        if(this.state.location){\n\n            location=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>The location is missing</div>\n\n            </React.Fragment>))\n\n        }\n\n        let date=false\n        if(this.state.date){\n\n            date=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>The date is missing</div>\n\n            </React.Fragment>))\n\n\n        }\n\n\n\n        let type_of_activity=false\n        if(this.state.type_of_activity){\n\n            type_of_activity=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select 1 type of activity</div>\n\n            </React.Fragment>))\n\n        }\n\n\n        \n        let entity_tags=false\n        if(this.state.entity_tags.length>0){\n\n            entity_tags=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select at least 1 entity tag</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n\n        \n        let encounters=false\n        if(this.state.encounters.length>0){\n\n            encounters=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>At least 1 encounter is needed</div>\n\n            </React.Fragment>))\n\n        }\n\n        \n\n\n\n        return [display_name && email_address && case_title && location && date && type_of_activity && entity_tags && encounters?true:false, error_message]\n    }\n\n\n    // \"witness\":{\n    //     \"email_address\":this.state.email_address,\n    //     \"display_name\":this.state.display_name,\n    //     \"occupation\":this.state.occupation,\n    //     \"age\":this.state.age,\n    //     \"company_name\":this.state.company_name\n    //     },\n    // \"case\": {\n    //         \"case_title\":this.state.case_title,\n    //         \"generic_description\":this.state.generic_description,\n    //         \"type_of_activity\":this.state.type_of_activity,\n    //         \"location\":this.state.location,\n    //         \"date\":this.state.date,\n    //         \"entity_tags\":this.state.entity_tags\n    //     },\n    // \"encounters\":this.state.encounters\n\n\n    submit= async ()=>{\n\n        try{\n            let [validation, error_messages]=this.front_end_validation()\n\n            let formated_error_messages= error_messages.map((error_message)=>{return(<React.Fragment><div>{error_message}</div></React.Fragment>)})\n            \n            if (validation){\n                \n                let add_case = await axios.post(this.url_api + '/add_case', {\n\n                    \"witness\":{\n                        \"email_address\":this.state.email_address,\n                        \"display_name\":this.state.display_name,\n                        \"occupation\":this.state.occupation,\n                        \"age\":this.state.age,\n                        \"company_name\":this.state.company_name\n                        },\n                    \"case\": {\n                        \"case_title\":this.state.case_title,\n                        \"generic_description\":this.state.generic_description,\n                        \"type_of_activity\":this.state.type_of_activity,\n                        \"location\":this.state.location,\n                        \"date\":this.state.date,\n                        \"entity_tags\":this.state.entity_tags\n                        },\n                    \"encounters\":this.state.encounters\n                })\n                \n                console.log(add_case)\n\n\n                let notification_content={\n                    validation:true,\n                    message:\"Case Added\"\n\n                }\n                this.props.onListCases(notification_content)\n\n            }else{\n                let notification_content={\n                    validation:false,\n                    message:formated_error_messages\n                }\n                this.props.onListCases(notification_content)\n            }\n\n        } catch (e) {\n            \n     \n\n            let notification_content={\n                validation:false,\n                message:\"Server Error. Please contact the administrator\"\n\n            }\n            this.props.onServerError(notification_content)\n\n       \n        }\n\n\n    }\n\n    \n\n    \n\n\n\n    render() {\n        return (<React.Fragment>\n            <h1>Add a Case</h1>\n            {this.display_form_main()}\n            {this.display_added_encounters()}\n            {this.display_form_encounters()}\n            <button className=\"btn btn-success btn-sm\" onClick={this.submit}>Submit Case!</button>\n            <button className=\"btn btn-success btn-sm\" onClick={()=>{this.props.onListCases({})}}>Back</button>\n        </React.Fragment>)\n    }\n\n\n\n\n\n\n\n}","import React from 'react'\nimport axios from 'axios'\nexport default class EachCase extends React.Component {\n\n\n    state = {\n        \"page_loaded\":false,\n        \"delete_mode\":false,\n        \n        \"display_name\":\"\",\n        \"occupation\":\"\",\n        \"age\":\"\",\n        \"company_name\":\"\",\n        \"case_title\":\"\",\n        \"generic_description\":\"\",\n        \"location\":\"\",\n        \"date\":\"\",\n        \"entity_tags\":[],\n        \"type_of_activity\":\"\",\n        \"encounters\":[],\n        \"witness\":{},\n        \"comments\":[],\n        \"new_content\":\"\",\n        \"new_like\":0,\n        \"edit_mode\":{\n            \"_id\":0\n        },\n        \"edit_content\":\"\",\n        \"edit_like\":0\n    }\n\n    componentDidMount= async() => {\n\n        try{\n            this.setState({\n                \"page_loaded\":true\n            })\n            let response = await axios.get(this.props.url_api + \"/case/\"+this.props.case_id) \n\n            this.setState({\n                \"display_name\":response.data[1].display_name,\n                \"occupation\":response.data[1].occupation,\n                \"age\":response.data[1].age,\n                \"company_name\":response.data[1].company_name,\n                \"case_title\":response.data[0].case_title,\n                \"generic_description\":response.data[0].generic_description,\n                \"location\":response.data[0].location,\n                \"date\":response.data[0].date,\n                \"entity_tags\":response.data[0].entity_tags,\n                \"type_of_activity\":response.data[0].type_of_activity,\n                \"encounters\":response.data[0].encounters,\n                \"comments\":response.data[0].comments,\n                \"page_loaded\":false\n            })\n\n        }catch(e){\n\n            let notification_content={\n                validation:false,\n                message:\"Server Error. Please contact the administrator\"\n\n            }\n            this.props.onServerError(notification_content)\n\n        }\n    }\n\n    display_loading_page(){\n\n        return(\n            <React.Fragment>\n                <h1>LOADING PAGE.</h1>\n                <h2>Please Wait...</h2>\n\n            </React.Fragment>\n        )\n\n\n    }\n    \n\n    display_case(){\n        // console.log(this.state.entity_tags.map(tag=>tag[\"entity\"]))\n        // console.log(this.state.entity_tags)\n\n        let each_case_jsx=(\n            <React.Fragment>\n                <section className=\"panel\">\n                    {/* <ul>\n                        <li>Title: {this.state.case.case_title}</li>\n                        <li>Description: {this.state.case.generic_description}</li>\n                        <li>Date: {this.state.case.date}</li>//split(\"T\")[0]\n                        <li>{this.state.witness.occupation}</li>\n                        <li>{this.state.witness.age}</li>\n                        <li>{this.state.witness.display_name}</li>\n                                                          \n                    </ul> */}\n\n       \n        \n        \n                    <div className=\"panel-head\">\n                        <h2 className=\"panel-title\">{this.state.case_title}</h2> \n                    </div>\n                    <div className=\"panel-line\"></div>\n                    <div className=\"panel-main my-4\">                        \n                        <label className=\"labels\">By</label>\n                        <p>Name: {this.state.display_name}<br/>Age: {this.state.age}<br/>{this.state.occupation?`Occupation: ${this.state.occupation}`:\"\"}<br/>{this.state.company_name?`Paranormal Company: ${this.state.company_name}`:\"\"}</p>\n                        \n                        <label className=\"labels\">Description</label>\n                        <p className=\"panel-printed-texts\">{this.state.generic_description}</p>\n                        \n                        <label className=\"labels\">Type of Activity</label>\n                        <p>{this.state.type_of_activity}</p>\n\n                        <label className=\"labels\">Date of Encounter</label>\n                        <p>{this.state.date.split(\"T\")[0]}</p>\n                        \n                        <label className=\"labels\">Location</label>\n                        <p>{this.state.location}</p>\n\n                        <label className=\"labels\">Entity Tags</label>\n                        <div className=\"panel-line my-2\" style={{\"height\":\"2px\"}}></div>\n                            <div className=\"container my-3\">\n                                <div className=\"row row-cols-3 row-cols-lg-5 g-2 g-lg-3\">{this.state.entity_tags.map(tag=>{return(\n                                    <React.Fragment>\n                                        <div className=\"col\">\n                                            <div className=\"p-3 panel-button tags\">{tag[\"entity\"]}</div>\n                                        </div>\n                                    </React.Fragment>)})}\n                                </div>\n                            </div>\n                        <div className=\"panel-line\" style={{\"height\":\"2px\"}}></div>          \n                    </div>\n                    \n                    <div className=\"panel-button-group\">\n                        <button className=\"btn btn-md panel-button\" onClick={()=>{this.props.onListCases({})}}>Back</button>\n                        <button className=\"btn btn-md panel-button\" onClick={this.delete_mode_activated}>Delete</button>\n                        <button className=\"btn btn-md panel-button\" onClick={()=>{this.props.onEditEachCase(this.props.case_id)}}>Edit</button>\n                    </div>\n                </section>\n\n            </React.Fragment>)\n\n        return each_case_jsx\n    }\n\n\n    display_encounters= () =>{\n\n        let encounters_jsx=[]\n        encounters_jsx.push((<React.Fragment>\n                <section className=\"panel panel-page-title\">\n                    <h1>Encounters</h1>\n                </section>\n            </React.Fragment>))\n        let i = 1\n        for(let encounter of this.state.encounters){\n\n\n            let encounter_jsx=(<React.Fragment>                \n                <section className=\"panel\">\n                    <h2>Encounter #{i}</h2>\n                    <div className=\"panel-line\"></div>\n                    <div className=\"panel-encounter-image\">\n                        <img src={encounter.image} className=\"rounded float-left img-fluid\" alt=\"encounter.image\"/>\n                    </div>\n                    <label className=\"labels\">Description</label>\n                    <p className=\"panel-printed-texts\">{encounter.sightings_description}</p>\n                    <label className=\"labels\">Equipments Used</label>\n                    <p>{encounter.equipment_used.join(\", \")}</p>\n                    <label className=\"labels\">Contact Type</label>\n                    <p>{encounter.contact_type.join(\", \")}</p>\n                    <label className=\"labels\">Number of Entities</label>\n                    <p>{encounter.number_of_entities}</p>\n                    <label className=\"labels\">Time of Enconter</label>\n                    <p>{encounter.time_of_encounter}</p>\n                    \n\n\n                </section>\n            </React.Fragment>)\n           \n            encounters_jsx.push(encounter_jsx)\n            i++\n\n        }\n\n\n        return encounters_jsx\n\n\n    }\n\n\n    display_added_comments=()=>{\n\n        let comment_jsx=[]\n\n        comment_jsx[0]=(\n            <React.Fragment>\n                <section className=\"panel panel-page-title\">\n                    <h2>Comments</h2>\n                </section>\n                \n            </React.Fragment>\n        )\n        \n        for(let comment of this.state.comments){\n\n            let each_comment=\"\"\n\n            if(comment._id==this.state.edit_mode._id && this.state.edit_mode._id != 0){\n\n                each_comment = (\n                    <React.Fragment key={comment._id}>   \n                            {this.display_edit_form_comments()}\n                    </React.Fragment>)\n                \n            }else{\n                if(Object.keys(comment).length!=1){\n                    each_comment = (\n                        <React.Fragment key={comment._id}>\n                            <section className=\"panel\">\n                                       \n                                <p className=\"panel-printed-texts\">{comment.content} </p>\n                                \n                                <div className=\"panel-button-group\">\n                                    <button className=\"btn btn-md panel-button\" onClick={()=>{this.edit_mode_activated(comment)}}>Edit</button>\n                                    <button className=\"btn btn-md panel-button\" onClick={()=>{this.delete_comment(comment)}}>Delete</button>\n                                </div>\n                            </section>\n                        </React.Fragment>)\n                }\n\n            }\n\n            comment_jsx.push(each_comment)\n        \n        }\n\n\n\n        return comment_jsx\n\n\n\n\n\n\n\n\n    }\n\n\n    display_edit_form_comments(){\n        \n        let value=\"\"\n        if(this.state.edit_like==\"1\"){\n \n            value=\"0\"\n\n\n        }else if(this.state.edit_like==\"0\"){\n\n            value=\"1\"\n\n\n        }\n        \n        return(\n            \n            <React.Fragment>\n                <section className=\"panel\"> \n                    <label>Enter your comments</label>\n                    <textarea class=\"form-control\" name=\"edit_content\" value={this.state.edit_content} onChange={this.update_any_field} rows=\"2\"></textarea> \n                    <div class=\"form-check form-switch\">\n                        <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckChecked\" name=\"edit_like\" value={value} onChange={this.update_any_field} checked={this.state.edit_like==\"1\"}/>\n                        <label class=\"form-check-label\" for=\"flexSwitchCheckChecked\">Like</label>\n                    </div>\n                    <div className=\"panel-button-group\">\n                        <button className=\"btn btn-md panel-button\" onClick={this.edit_mode_cancelled}>Cancel</button>\n                        <button className=\"btn btn-md panel-button\" onClick={this.edit_comment}>Done!</button>\n                    </div>\n                </section>                \n            </React.Fragment>\n\n        )\n\n    }\n\n\n\n    display_form_comments(){\n\n        let value=\"\"\n        if(this.state.new_like==\"1\"){\n \n            value=\"0\"\n\n\n        }else if(this.state.new_like==\"0\"){\n\n            value=\"1\"\n\n\n        }\n        \n\n        return(\n            <React.Fragment>\n                <section className=\"panel\"> \n                    <label>Enter your comments</label>\n                    <textarea class=\"form-control\" name=\"new_content\" value={this.state.new_content} onChange={this.update_any_field} rows=\"2\"></textarea> \n                    <div class=\"form-check form-switch\">\n                        <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckChecked\" name=\"new_like\" value={value} onChange={this.update_any_field} checked={this.state.new_like==\"1\"}/>\n                        <label class=\"form-check-label\" for=\"flexSwitchCheckChecked\">Like</label>\n                    </div>\n                    <div className=\"panel-button-group\">\n                        <button className=\"btn btn-md panel-button\" onClick={this.add_comment}>Add!</button>\n                    </div>\n                </section>\n            </React.Fragment>)\n\n    }\n\n\n    delete_form(){\n        return(\n            <React.Fragment>\n                <section className=\"panel\">\n                    <div className=\"panel-line\"></div>\n                    <p>Are you sure you want to delete this case?<br/><span style={{\"color\":\"red\"}}>WARNING:</span> Action is irreversible!!</p> \n                    <div className=\"panel-button-group\">  \n                        <button className=\"btn btn-md panel-button\" onClick={this.delete_mode_cancelled}>Cancel</button>\n                        <button className=\"btn btn-md panel-button\" onClick={this.confirm_delete}>Confirm!</button>\n                    </div>  \n                </section>\n            </React.Fragment>\n        )\n        \n    }\n\n    delete_mode_activated=()=>{\n\n        this.setState({\n\n            \"delete_mode\":true\n\n        })\n        \n\n\n\n    }\n\n\n\n    delete_mode_cancelled=()=>{\n\n        this.setState({\n\n            \"delete_mode\":false\n\n        })\n        \n\n\n\n    }\n\n\n\n\n    confirm_delete= async()=>{\n\n        try{\n            console.log(this.props.case_id)\n            let outcome = await axios.delete(this.props.url_api + \"/delete_case/\"+this.props.case_id)\n\n            console.log(outcome)\n\n            let notification_content ={\n                validation:true,\n                message:\"Case Deleted\"\n            }\n            this.props.onListCases(notification_content)\n\n        }catch(e){\n\n       \n\n            let notification_content={\n                validation:false,\n                message:\"Server Error. Please contact the administrator\"\n\n            }\n            this.props.onServerError(notification_content)\n\n        \n\n\n        }\n\n\n\n    }\n\n    \n\n\n\n\n    update_any_field=(e)=>{\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    add_comment_validation = ()=>{\n\n        let error_message=[]\n\n        let  content=false\n        if(this.state.new_content){\n\n            content=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Enter a comment</div>\n\n            </React.Fragment>))\n\n\n        }\n\n\n       \n\n\n        return [content?true:false, error_message]\n\n\n    }\n\n    add_comment= async ()=>{\n\n        try{\n            let [validation, error_messages]=this.add_comment_validation()\n\n            let formated_error_messages= error_messages.map((error_message)=>{return(<React.Fragment><div>{error_message}</div></React.Fragment>)}) \n            console.log(error_messages[0])\n            if (validation){\n                let outcome = await axios.post(this.props.url_api + \"/post_comment\",{\n                    \"case_id\":this.props.case_id,\n                    \"content\":this.state.new_content,\n                    \"like\":this.state.new_like\n\n                }) \n\n                \n                let new_comment_id=outcome.data.insertedId\n                console.log(new_comment_id)\n\n                let new_comment={\n                    \"_id\":new_comment_id,\n                    \"content\":this.state.new_content,\n                    \"like\":this.state.new_like\n                \n                }\n                \n                \n                this.setState({\n                    \"comments\": [...this.state.comments, new_comment],\n                    \"new_content\":\"\",\n                    \"new_like\":false,\n                })\n\n                \n\n\n\n                let notification_content ={\n                    validation:true,\n                    message:\"Comment Added\"\n                }\n                this.props.onComment(notification_content)\n\n            }else{\n\n                \n                let notification_content={\n                    validation:false,\n                    message:formated_error_messages\n                }\n                this.props.onComment(notification_content)\n\n\n\n\n            }\n        \n        } catch (e) {\n            \n        \n\n            let notification_content={\n                validation:false,\n                message:\"Server Error. Please contact the administrator\"\n\n            }\n            this.props.onServerError(notification_content)\n\n        \n\n               \n        }\n        \n    }\n\n\n    delete_comment = async (comment_delete) =>{\n\n        let outcome = await axios.delete(this.props.url_api + \"/delete_comment/\"+comment_delete._id) \n        console.log(outcome)\n\n\n        let comments_list=this.state.comments\n   \n        let index_to_delete = comments_list.findIndex(comment=>comment._id==comment_delete._id)\n   \n        let new_comment_list=[...comments_list.slice(0,index_to_delete), ...comments_list.slice(index_to_delete+1)]\n        new_comment_list=[...new_comment_list, {\"_id\":comment_delete._id}] // to indicate deleted comment\n   \n        this.setState({\n   \n           \"comments\":new_comment_list\n   \n        })\n        console.log(comment_delete._id)\n\n        \n        let notification_content ={\n            validation:true,\n            message:\"Comment Deleted\"\n        }\n        this.props.onComment(notification_content)\n        \n   \n    }\n\n\n    \n\n\n    edit_mode_activated=(comment)=>{\n        this.setState({\n\n            \"edit_mode\":comment,\n            \"edit_content\":comment.content,\n            \"edit_like\":comment.like\n\n        })\n\n    }\n\n\n    edit_mode_cancelled=()=>{\n        this.setState({\n\n            \"edit_mode\":{\n                \"_id\":0\n            },\n            \"edit_content\":\"\",\n            \"edit_like\":0\n\n        })\n\n    }\n\n      \n    edit_comment_validation = () =>{\n\n        let error_message=[]\n\n        let  content=false\n        if(this.state.edit_content){\n\n            content=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Enter a comment</div>\n\n            </React.Fragment>))\n\n\n        }\n\n\n       \n\n\n        return [content?true:false, error_message]\n\n\n    }\n\n    edit_comment = async () =>{\n\n        try{\n            let [validation, error_messages]=this.edit_comment_validation()\n\n            let formated_error_messages= error_messages.map((error_message)=>{return(<React.Fragment><div>{error_message}</div></React.Fragment>)}) \n            console.log(error_messages[0])\n            if (validation){\n                let outcome = await axios.put(this.props.url_api + \"/edit_comment/\"+this.state.edit_mode._id,{\n                    \"content\":this.state.edit_content,\n                    \"like\":this.state.edit_like\n                }) \n                \n\n                \n                let edited_comment = {\n            \n                    \"_id\":this.state.edit_mode._id,\n                    \"content\":this.state.edit_content,\n                    \"like\":this.state.edit_like\n        \n                }\n                \n                let index_to_edit = this.state.comments.findIndex( comment => comment._id == edited_comment._id);\n                \n                let updated_comments = [...this.state.comments.slice(0, index_to_edit), edited_comment, ...this.state.comments.slice(index_to_edit+1)]\n        \n                this.setState({\n                    \"comments\": updated_comments,\n                    'edit_mode':{\n                        '_id':0\n                    },\n                    \"edit_content\":\"\",\n                    \"edit_like\":false\n                })\n        \n                \n                let notification_content ={\n                    validation:true,\n                    message:\"Comment Edited\"\n                }\n                this.props.onComment(notification_content)\n\n            }else{\n\n                \n                let notification_content={\n                    validation:false,\n                    message:formated_error_messages\n                }\n                this.props.onComment(notification_content)\n\n\n\n\n            }\n        \n        } catch (e) {\n            \n            let notification_content={\n                validation:false,\n                message:\"Server Error. Please contact the administrator\",\n                color:\"black\"\n\n            }\n            this.props.onListCases(notification_content)         \n        }\n\n        \n\n    }\n\n\n    \n\n\n    render() {\n        let render_items=\"\"\n        if(this.state.page_loaded){\n            render_items=(<React.Fragment>{this.display_loading_page()}</React.Fragment>)\n            \n        }else{\n            render_items=(<React.Fragment>\n                {/* <h2>Cased Number: {this.props.case_id}</h2> */}\n                {this.state.delete_mode?this.delete_form():\"\"}\n                {this.display_case()}\n                {this.display_encounters()}\n                {this.display_added_comments()}\n                {this.display_form_comments()}\n                \n                </React.Fragment>)\n            \n        }\n        return (<React.Fragment>\n            <section className=\"panel panel-page-title\">\n                <h1>Each Case</h1>\n            </section>\n            \n            {render_items}\n        </React.Fragment>)\n    }\n\n\n\n\n\n\n\n}","import React from 'react'\nimport axios from 'axios'\nexport default class EditEachCase extends React.Component {\n\n    url_api = this.props.url_api\n\n    state = {\n        \"page_loaded\":false,\n        \"entity_tags_list\":[],\n        \"email_address\":\"\",\n        \"display_name\":\"\",\n        \"occupation\":\"\",\n        \"age\":\"\",\n        \"company_name\":\"\",\n        \"case_title\":\"\",\n        \"generic_description\":\"\",\n        \"location\":\"\",\n        \"date\":\"\",\n        \"entity_tags\":[],\n        \"type_of_activity\":\"Accidental\",\n        \"encounters\":[],\n        \"new_image\":\"\",\n        \"new_sightings_description\":\"\",\n        \"new_equipment_used\":[],\n        \"new_contact_type\":[],\n        \"new_number_of_entities\":0,\n        \"new_time_of_encounter\":\"Early Morning\",\n        \"edit_mode\":{\n            \"_id\":0\n        },\n        \"edit_image\":\"\",\n        \"edit_sightings_description\":\"\",\n        \"edit_equipment_used\":[],\n        \"edit_contact_type\":[],\n        \"edit_number_of_entities\":0,\n        \"edit_time_of_encounter\":\"\"\n\n    }\n\n    componentDidMount= async() => {\n        try{\n            this.setState({\"page_loaded\":true})\n            let response = await axios.get(this.props.url_api + \"/case/\"+this.props.case_id)\n            this.setState({\n\n                \"page_loaded\":false,\n                \"email_address\":response.data[1].email_address,\n                \"display_name\":response.data[1].display_name,\n                \"occupation\":response.data[1].occupation,\n                \"age\":response.data[1].age,\n                \"company_name\":response.data[1].company_name,\n                \"case_title\":response.data[0].case_title,\n                \"generic_description\":response.data[0].generic_description,\n                \"location\":response.data[0].location,\n                \"date\":response.data[0].date.split(\"T\")[0],\n                \"entity_tags\":response.data[0].entity_tags.map(entity_tag=>entity_tag._id),\n                \"type_of_activity\":response.data[0].type_of_activity,\n                \"encounters\":response.data[0].encounters\n                \n\n\n            })\n\n            let entity_tags = await axios.get(this.props.url_api + \"/list_entity_tags\") \n\n                    \n            this.setState({\n\n                \"entity_tags_list\":entity_tags.data\n\n\n            })\n\n        } catch(e){\n\n            let notification_content={\n                validation:false,\n                message:\"Server Error. Please contact the administrator\"\n\n            }\n            this.props.onServerError(notification_content)\n\n        }\n\n    }\n    \n\n\n    \n    display_loading_page(){\n\n        return(\n            <React.Fragment>\n                <h1>LOADING PAGE.</h1>\n                <h2>Please Wait...</h2>\n\n            </React.Fragment>\n        )\n\n\n    }\n\n\n    display_form_main(){\n\n        \n        let entity_tags_list_jsx = []\n\n        for (let entity_tag of this.state.entity_tags_list){\n            entity_tags_list_jsx.push(<option value={entity_tag._id}>{entity_tag.entity}</option>)\n        }\n\n\n        return(\n            <React.Fragment>\n                <main>\n                    <div id=\"case\">\n                        <h2>Case Details</h2>\n                        <label>Title</label>\n                            <input type=\"text\" name=\"case_title\" className=\"form-control\" value={this.state.case_title} onChange={this.update_any_field} />\n                        <label>Description</label>\n                            <input type=\"text\" name=\"generic_description\" className=\"form-control\" value={this.state.generic_description} onChange={this.update_any_field} />\n                        <label>Location</label>\n                            <input type=\"text\" name=\"location\" className=\"form-control\" value={this.state.location} onChange={this.update_any_field} />\n                        <label>Date Of Incident: </label>\n                            <input type=\"date\" name=\"date\" className=\"\" value={this.state.date} onChange={this.update_any_field} />\n                        <label>Activity:</label>\n                        <select onChange={this.update_any_field}  value={this.state.type_of_activity} name=\"type_of_activity\" className=\"form-select\" aria-label=\"Default select example\">   \n                            <option value=\"accidental\">Accidental</option>\n                            <option value=\"urbex\">UrbEx</option>\n                            <option value=\"solo\">Solo</option>\n                            <option value=\"paranormal_investigation\">Paranormal Investigation</option>\n                            <option value=\"others\">Others</option>\n                        </select>\n                        <label>Entity Tags:</label>\n                        <select onChange={this.update_multivalue_field}  value={this.state.entity_tags} name=\"entity_tags\" className=\"form-select\" multiple aria-label=\"multiple select example\">\n                            {entity_tags_list_jsx}\n                        </select>\n\n                    </div>\n                </main>\n            </React.Fragment>\n\n        )\n\n   }\n\n\n    display_added_encounters(){\n\n        let encounter_jsx=[]\n\n        encounter_jsx[0]=(\n            <React.Fragment>\n                <h2>Encounter Details</h2>\n            </React.Fragment>\n        )\n        \n        for(let encounter of this.state.encounters){\n\n            let each_encounter=\"\"\n\n            if(encounter._id==this.state.edit_mode._id && this.state.edit_mode._id != 0){\n\n                each_encounter = (\n                    <React.Fragment key={encounter._id}>\n                        <div>    \n                            {this.display_edit_form_encounters()}\n                        </div>\n                    </React.Fragment>)\n                \n            }else{\n                if(encounter.encounter_status!=\"deleted\"){\n        \n                    each_encounter = (\n                        <React.Fragment key={encounter._id}>\n                            <div>    \n                                {encounter.image}\n                                {encounter.sightings_description}\n                                {encounter.equipment_used}\n                                {encounter.contact_type}\n                                {encounter.number_of_entities}\n                                {encounter.time_of_encounter}\n                                <button className=\"btn btn-success btn-sm\" onClick={()=>{this.edit_mode_activated(encounter)}}>Edit</button>\n                                <button className=\"btn btn-danger btn-sm mx-1\" onClick={()=>{this.delete_encounter(encounter)}}>Delete</button>\n                            </div>\n                        </React.Fragment>)\n                }\n\n            }\n\n            encounter_jsx.push(each_encounter)\n        \n        }\n\n\n\n        return encounter_jsx\n\n    }\n\n\n    display_edit_form_encounters(){\n\n        return(\n\n            <React.Fragment>\n                <label>Image</label>\n                <input type=\"text\" name=\"edit_image\" className=\"form-control\" value={this.state.edit_image} onChange={this.update_any_field} />\n                <label>Description</label>\n                <input type=\"text\" name=\"edit_sightings_description\" className=\"form-control\" value={this.state.edit_sightings_description} onChange={this.update_any_field} />\n                <label>Equipment Used</label>\n                <select onChange={this.update_multivalue_field}  value={this.state.edit_equipment_used} name=\"edit_equipment_used\" className=\"form-select\" multiple aria-label=\"multiple select example\">   \n                        <option value=\"Phone Camera\">Phone Camera</option>\n                        <option value=\"Camera (fixed)\">Camera (fixed)</option>\n                        <option value=\"Camera (portable)\">Camera (portable)</option>\n                        <option value=\"Voice Recorder\">Voice Recorder</option>\n                        <option value=\"EMF Recorder\">EMF Recorder</option>\n                        <option value=\"Thermal Camera\">Thermal Camera</option>\n                        <option value=\"Spirit Box\">Spirit Box</option> \n                        <option value=\"Others\">Others</option>\n                        <option value=\"None\">None</option>\n                </select>\n                <label>Contact Type</label>\n                <select onChange={this.update_multivalue_field}  value={this.state.edit_contact_type} name=\"edit_contact_type\" className=\"form-select\" multiple aria-label=\"multiple select example\">   \n                        <option value=\"Visual\">Visual</option>\n                        <option value=\"Audio\">Audio</option>\n                        <option value=\"Verbal\">Verbal</option>\n                        <option value=\"Feel\">Feel</option>\n                </select>\n                <label>Number of Entities Encountered</label>\n                <input type=\"text\" name=\"edit_number_of_entities\" className=\"form-control\" value={this.state.edit_number_of_entities} onChange={this.update_any_field} />\n                <label>Time of Encounter</label>\n                <select onChange={this.update_any_field}  value={this.state.edit_time_of_encounter} name=\"edit_time_of_encounter\" className=\"form-select\" aria-label=\"Default select example\">   \n                        <option value=\"Early Morning\">Early Morning</option>\n                        <option value=\"Dawn\">Dawn</option>\n                        <option value=\"Morning\">Morning</option>\n                        <option value=\"Midday\">Midday</option>\n                        <option value=\"Afternoon\">Afternoon</option>\n                        <option value=\"Dusk\">Dusk</option>\n                        <option value=\"Evening\">Evening</option>\n                        <option value=\"Midnight\">Midnight</option>\n                </select>\n                <button className=\"btn btn-success btn-sm\" onClick={this.edit_mode_cancelled}>Cancel</button>\n                <button className=\"btn btn-success btn-sm\" onClick={this.edit_encounter}>Done!</button>\n\n\n            </React.Fragment>\n\n        )\n\n    }\n\n\n\n    display_form_encounters(){\n\n        \n\n        return(\n            <React.Fragment>\n                <label>Image</label>\n                <input type=\"text\" name=\"new_image\" className=\"form-control\" value={this.state.new_image} onChange={this.update_any_field} />\n                <label>Description</label>\n                <input type=\"text\" name=\"new_sightings_description\" className=\"form-control\" value={this.state.new_sightings_description} onChange={this.update_any_field} />\n                <label>Equipment Used</label>\n                <select onChange={this.update_multivalue_field}  value={this.state.new_equipment_used} name=\"new_equipment_used\" className=\"form-select\" multiple aria-label=\"multiple select example\">   \n                        <option value=\"Phone Camera\">Phone Camera</option>\n                        <option value=\"Camera (fixed)\">Camera (fixed)</option>\n                        <option value=\"Camera (portable)\">Camera (portable)</option>\n                        <option value=\"Voice Recorder\">Voice Recorder</option>\n                        <option value=\"EMF Recorder\">EMF Recorder</option>\n                        <option value=\"Thermal Camera\">Thermal Camera</option>\n                        <option value=\"Spirit Box\">Spirit Box</option> \n                        <option value=\"Others\">Others</option>\n                        <option value=\"None\">None</option>\n                </select>\n                <label>Contact Type</label>\n                <select onChange={this.update_multivalue_field}  value={this.state.new_contact_type} name=\"new_contact_type\" className=\"form-select\" multiple aria-label=\"multiple select example\">   \n                        <option value=\"Visual\">Visual</option>\n                        <option value=\"Audio\">Audio</option>\n                        <option value=\"Verbal\">Verbal</option>\n                        <option value=\"Feel\">Feel</option>\n                </select>\n                <label>Number of Entities Encountered</label>\n                <input type=\"text\" name=\"new_number_of_entities\" className=\"form-control\" value={this.state.new_number_of_entities} onChange={this.update_any_field} />\n                <label>Time of Encounter</label>\n                <select onChange={this.update_any_field}  value={this.state.new_time_of_encounter} name=\"new_time_of_encounter\" className=\"form-select\" aria-label=\"Default select example\">   \n                        <option value=\"Early Morning\">Early Morning</option>\n                        <option value=\"Dawn\">Dawn</option>\n                        <option value=\"Morning\">Morning</option>\n                        <option value=\"Midday\">Midday</option>\n                        <option value=\"Afternoon\">Afternoon</option>\n                        <option value=\"Dusk\">Dusk</option>\n                        <option value=\"Evening\">Evening</option>\n                        <option value=\"Midnight\">Midnight</option>\n                </select>\n                \n                <button className=\"btn btn-success btn-sm\" onClick={this.add_encounter}>Add!</button>\n\n            </React.Fragment>)\n\n    }\n\n\n    update_any_field=(e)=>{\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    update_multivalue_field=(e)=>{\n\n        let entity_tags_chosen=this.state[e.target.name]\n\n        let updated_entity_tags_chosen = []\n\n        if(entity_tags_chosen.includes(e.target.value)){\n\n            let unchosen_index = entity_tags_chosen.indexOf(e.target.value)\n            updated_entity_tags_chosen = [...entity_tags_chosen.slice(0,unchosen_index), ...entity_tags_chosen.slice(unchosen_index+1)]\n        } else {\n\n            updated_entity_tags_chosen = [...entity_tags_chosen, e.target.value]\n        \n        }\n\n        this.setState({\n\n            [e.target.name]:updated_entity_tags_chosen\n\n        })\n\n\n    }\n\n    add_encounter_validation=()=>{\n\n        let error_message=[]\n\n\n        let image=false\n        \n        if(this.state.new_image!=\"\" && this.state.new_image.includes(\"https\")){\n\n            image=true\n\n        } else {\n\n            \n            if(this.state.new_image==\"\"){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Image name is missing</div>\n    \n                </React.Fragment>))\n\n            } else if(!this.state.new_image.includes(\"https\")){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Image must have URL name</div>\n    \n                </React.Fragment>))\n\n\n\n            } \n\n\n        }\n\n\n        let equipment_used=false\n        if(this.state.new_equipment_used.length>0){\n\n            equipment_used=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select at least one equipment</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n        let contact_type=false\n        if(this.state.new_contact_type.length>0){\n\n            contact_type=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select at least 1 contact type</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n        let time_of_encounter=false\n        if(this.state.new_time_of_encounter){\n\n            time_of_encounter=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select 1 time of encounter</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n\n\n\n        let number_of_entities=false\n        if(this.state.new_number_of_entities && /\\d/.test(this.state.new_number_of_entities) && parseInt(this.state.new_number_of_entities)>=1){\n\n            number_of_entities=true\n\n        } else {\n\n            \n\n            if(!this.state.new_number_of_entities){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Number of entities is missing</div>\n    \n                </React.Fragment>))\n\n            }else if(!/\\d/.test(this.state.new_number_of_entities)){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Number of entities must be in numbers</div>\n    \n                </React.Fragment>))\n\n\n\n            }else if(!parseInt(this.state.new_number_of_entities)>=1){\n\n                error_message.push((<React.Fragment>\n\n                    <div>There should be at least 1 entity</div>\n    \n                </React.Fragment>))\n\n\n\n            }\n\n\n        }\n\n        \n\n\n\n        return [image && number_of_entities && equipment_used && contact_type && time_of_encounter?true:false, error_message]\n    }\n\n\n\n\n    add_encounter=()=>{\n\n        \n        let [validation, error_messages]=this.add_encounter_validation()\n\n        let formated_error_messages= error_messages.map((error_message)=>{return(<React.Fragment><div>Encounter: {error_message}</div></React.Fragment>)})\n        \n\n        if (validation){\n\n            let new_encounter={\n                \"_id\":\"front_end_id\"+new Date().valueOf()+\"/\"+Math.floor(Math.random()*(10000-1000+1)+1000),\n                \"image\":this.state.new_image,\n                \"sightings_description\":this.state.new_sightings_description,\n                \"equipment_used\":this.state.new_equipment_used,\n                \"contact_type\":this.state.new_contact_type,\n                \"number_of_entities\":this.state.new_number_of_entities,\n                \"time_of_encounter\":this.state.new_time_of_encounter\n    \n            }\n            \n            this.setState({\n                \"encounters\": [...this.state.encounters, new_encounter],\n                \"new_image\":\"\",\n                \"new_sightings_description\":\"\",\n                \"new_equipment_used\":[],\n                \"new_contact_type\":[],\n                \"new_number_of_entities\":0,\n                \"new_time_of_encounter\":\"\"\n            })\n\n\n        }else{\n            let notification_content={\n                validation:false,\n                message:formated_error_messages\n            }\n            this.props.onEnterEachCase(notification_content,this.props.case_id) \n        }\n\n     \n            \n\n\n    }\n\n\n\n\n\n    delete_encounter = (encounter_delete) =>{\n\n        let encounters_list=this.state.encounters\n   \n        let index_to_delete = encounters_list.findIndex(encounter=>encounter._id==encounter_delete._id)\n   \n        let new_encounter_list=[...encounters_list.slice(0,index_to_delete), ...encounters_list.slice(index_to_delete+1)]\n        \n        if(!encounter_delete._id.includes(\"front_end_id\")){// front_end_id are encounters that are temporarily created in the front end\n            new_encounter_list=[...new_encounter_list, {\"_id\":encounter_delete._id, \"encounter_status\":\"deleted\"}] // to indicate deleted encounter\n        }\n\n        \n   \n        this.setState({\n   \n           \"encounters\":new_encounter_list\n   \n        })\n   \n   \n   \n    }\n\n\n    edit_mode_activated=(encounter)=>{\n        this.setState({\n\n            \"edit_mode\":encounter,\n            \"edit_image\":encounter.image,\n            \"edit_sightings_description\":encounter.sightings_description,  \n            \"edit_equipment_used\":encounter.equipment_used,\n            \"edit_contact_type\":encounter.contact_type,\n            \"edit_number_of_entities\":encounter.number_of_entities,\n            \"edit_time_of_encounter\":encounter.time_of_encounter\n\n        })\n\n    }\n\n    edit_mode_cancelled=()=>{\n\n        this.setState({\n\n            \"edit_mode\":{\n                \"_id\":0\n            },\n            \"edit_image\":\"\",\n            \"edit_sightings_description\":\"\",\n            \"edit_equipment_used\":[],\n            \"edit_contact_type\":[],\n            \"edit_number_of_entities\":0,\n            \"edit_time_of_encounter\":\"\"\n\n        })\n\n\n    }\n\n\n    edit_encounter_validation=()=>{\n\n        let error_message=[]\n\n\n        let image=false\n        \n        if(this.state.edit_image!=\"\" && this.state.edit_image.includes(\"https\")){\n\n            image=true\n\n        } else {\n\n            \n                       \n            if(this.state.edit_image==\"\"){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Image name is missing</div>\n    \n                </React.Fragment>))\n\n            } else if(!this.state.edit_image.includes(\"https\")){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Image must have URL name</div>\n    \n                </React.Fragment>))\n\n\n\n            } \n\n\n        }\n\n\n        let equipment_used=false\n        if(this.state.edit_equipment_used.length>0){\n\n            equipment_used=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select at least one equipment</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n        let contact_type=false\n        if(this.state.edit_contact_type.length>0){\n\n            contact_type=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select at least 1 contact type</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n        let time_of_encounter=false\n        if(this.state.edit_time_of_encounter){\n\n            time_of_encounter=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select 1 time of encounter</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n\n\n\n        let number_of_entities=false\n        if(this.state.edit_number_of_entities && /\\d/.test(this.state.edit_number_of_entities) && parseInt(this.state.edit_number_of_entities)>=1){\n\n            number_of_entities=true\n\n        } else {\n\n            \n\n            if(!this.state.edit_number_of_entities){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Number of entities is missing</div>\n    \n                </React.Fragment>))\n\n            }else if(!/\\d/.test(this.state.edit_number_of_entities)){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Number of entities must be in numbers</div>\n    \n                </React.Fragment>))\n\n\n\n            }else if(!parseInt(this.state.edit_number_of_entities)>=1){\n\n                error_message.push((<React.Fragment>\n\n                    <div>There should be at least 1 entity</div>\n    \n                </React.Fragment>))\n\n\n\n            }\n\n\n        }\n\n        \n\n\n\n        return [image && number_of_entities && equipment_used && contact_type && time_of_encounter?true:false, error_message]\n    }\n\n    edit_encounter = () =>{\n\n\n        let [validation, error_messages]=this.edit_encounter_validation()\n\n        let formated_error_messages = error_messages.map((error_message)=>{return(<React.Fragment><div>Encounter: {error_message}</div></React.Fragment>)})\n\n        if (validation){\n\n\n            let edited_encounter = {\n                \n                \"_id\":this.state.edit_mode._id,\n                \"image\":this.state.edit_image,\n                \"sightings_description\":this.state.edit_sightings_description,\n                \"equipment_used\":this.state.edit_equipment_used,\n                \"contact_type\":this.state.edit_contact_type,\n                \"number_of_entities\":this.state.edit_number_of_entities,\n                \"time_of_encounter\":this.state.edit_time_of_encounter\n\n            }\n            \n\n\n\n\n            let index_to_edit = this.state.encounters.findIndex( encounter => encounter._id == edited_encounter._id);\n            \n            let updated_encounters = [...this.state.encounters.slice(0, index_to_edit), edited_encounter, ...this.state.encounters.slice(index_to_edit+1)]\n\n            this.setState({\n                \"encounters\": updated_encounters,\n                'edit_mode':{\n                    '_id':0\n                },\n                \"edit_image\":\"\",\n                \"edit_sightings_description\":\"\",\n                \"edit_equipment_used\":[],\n                \"edit_contact_type\":[],\n                \"edit_number_of_entities\":0,\n                \"edit_time_of_encounter\":\"\"\n            })\n\n\n\n\n        \n    \n\n        }else{\n            let notification_content={\n                validation:false,\n                message:formated_error_messages\n            }\n            this.props.onEnterEachCase(notification_content,this.props.case_id) \n        }\n\n\n    }\n\n    \n\n\n    front_end_validation=()=>{\n\n\n        let error_message=[]\n\n        let  display_name=false\n        if(this.state.display_name){\n\n            display_name=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>The display name is missing</div>\n\n            </React.Fragment>))\n\n\n        }\n        \n        let age=false\n        \n        \n        if(this.state.age && /\\d/.test(this.state.age) && (parseInt(this.state.age)>=10 && parseInt(this.state.age)<=120)){ \n\n            age=true\n\n        } else {\n            if(!this.state.age){\n\n                error_message.push((<React.Fragment>\n\n                    <div>The age is missing</div>\n    \n                </React.Fragment>))\n\n            }else if(!/\\d/.test(this.state.age)){\n\n                error_message.push((<React.Fragment>\n\n                    <div>Age must be a number</div>\n\n                </React.Fragment>))\n\n\n            }else if (!(parseInt(this.state.age)>=10 && parseInt(this.state.age)<=120)){\n                error_message.push((<React.Fragment>\n\n                    <div>Insert a proper age from 10 to 120</div>\n\n                </React.Fragment>))\n            }\n\n        }\n\n        \n\n        let email_address=false\n        if(this.state.email_address && this.state.email_address.includes(\"@\")){\n\n            email_address=true\n\n        } else {\n\n            if(!this.state.email_address){\n                error_message.push((<React.Fragment>\n\n                    <div>The email address is missing</div>\n    \n                </React.Fragment>))\n            } else {\n                error_message.push((<React.Fragment>\n\n                    <div>The email address is inappropriate format</div>\n    \n                </React.Fragment>))\n\n\n            }\n\n\n        }\n\n\n        let case_title=false\n        if(this.state.case_title){\n\n            case_title=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>The case title is missing</div>\n\n            </React.Fragment>))\n\n        }\n\n\n        let location=false\n        if(this.state.location){\n\n            location=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>The location is missing</div>\n\n            </React.Fragment>))\n\n        }\n\n        let date=false\n        if(this.state.date){\n\n            date=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>The date is missing</div>\n\n            </React.Fragment>))\n\n\n        }\n\n\n\n        let type_of_activity=false\n        if(this.state.type_of_activity){\n\n            type_of_activity=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select 1 type of activity</div>\n\n            </React.Fragment>))\n\n        }\n\n\n        \n        let entity_tags=false\n        if(this.state.entity_tags.length>0){\n\n            entity_tags=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>Select at least 1 entity tag</div>\n\n            </React.Fragment>))\n\n        }\n\n\n\n\n        \n        let encounters=false\n        if(this.state.encounters.length>0){\n\n            encounters=true\n\n        } else {\n\n            error_message.push((<React.Fragment>\n\n                <div>At least 1 encounter is needed</div>\n\n            </React.Fragment>))\n\n        }\n\n        \n\n\n\n        return [display_name && email_address && case_title && location && date && type_of_activity && entity_tags && encounters?true:false, error_message]\n    }\n\n\n    // \"witness\":{\n    //     \"email_address\":this.state.email_address,\n    //     \"display_name\":this.state.display_name,\n    //     \"occupation\":this.state.occupation,\n    //     \"age\":this.state.age,\n    //     \"company_name\":this.state.company_name\n    //     },\n    // \"case\": {\n    //         \"case_title\":this.state.case_title,\n    //         \"generic_description\":this.state.generic_description,\n    //         \"type_of_activity\":this.state.type_of_activity,\n    //         \"location\":this.state.location,\n    //         \"date\":this.state.date,\n    //         \"entity_tags\":this.state.entity_tags\n    //     },\n    // \"encounters\":this.state.encounters\n\n    submit= async ()=>{\n        \n        try{\n\n\n            let [validation, error_messages]=this.front_end_validation()\n\n            let formated_error_messages= error_messages.map((error_message)=>{return(<React.Fragment><div>{error_message}</div></React.Fragment>)})\n           \n            if (validation){\n                \n                let edit_case = await axios.put(this.url_api + '/update_case/'+this.props.case_id, {\n\n                    \"witness\":{\n                        \"email_address\":this.state.email_address,\n                        \"display_name\":this.state.display_name,\n                        \"occupation\":this.state.occupation,\n                        \"age\":this.state.age,\n                        \"company_name\":this.state.company_name\n                        },\n                    \"case\": {\n                        \"case_title\":this.state.case_title,\n                        \"generic_description\":this.state.generic_description,\n                        \"type_of_activity\":this.state.type_of_activity,\n                        \"location\":this.state.location,\n                        \"date\":this.state.date,\n                        \"entity_tags\":this.state.entity_tags\n                        },\n                    \"encounters\":this.state.encounters\n                })\n                \n               \n\n\n                let notification_content={\n                    validation:true,\n                    message:\"Case Edited\"\n\n                }\n                this.props.onEnterEachCase(notification_content,this.props.case_id) \n\n            }else{\n                let notification_content={\n                    validation:false,\n                    message:formated_error_messages\n\n                }\n                this.props.onEnterEachCase(notification_content,this.props.case_id) \n            }\n\n        } catch (e) {\n        \n\n            let notification_content={\n                validation:false,\n                message:\"Server Error. Please contact the administrator\"\n\n            }\n            this.props.onServerError(notification_content)\n\n                \n        }\n\n\n    }\n    \n        \n\n    \n\n   \n\n\n    render() { \n\n        let render_items=\"\"\n        if(this.state.page_loaded){\n            render_items=(<React.Fragment>{this.display_loading_page()}</React.Fragment>)\n            \n        }else{\n            render_items=(<React.Fragment>\n                {this.display_form_main()}\n                {this.display_added_encounters()}\n                {this.display_form_encounters()}\n                <button className=\"btn btn-success btn-sm\" onClick={this.submit}>Submit Case!</button>\n                <button className=\"btn btn-success btn-sm\" onClick={()=>{this.props.onEnterEachCase({},this.props.case_id)}}>Back</button>\n                </React.Fragment>)\n            \n        }\n\n\n        return (<React.Fragment>\n            <h1>Edit Case</h1>\n            {render_items}            \n        </React.Fragment>)\n    }\n\n\n\n\n\n\n\n\n}","import React from 'react'\nimport axios from 'axios'\nexport default function DeleteEachCase (props) {\n    \n    \n    \n    return (<React.Fragment>\n            {/* <h1>Are you sure you want to delete</h1> */}\n            <div className={`alert-primary alert ${props.className_reveal}`} role=\"alert\" style={{backgroundColor:props.color}}>\n                {props.message}\n                <button className=\"btn btn-success btn-sm\" onClick={props.onClickPanelDissappear}>Click to continue</button>\n            </div>   \n            \n        </React.Fragment>)\n    \n\n}","import React from 'react'\nimport axios from 'axios'\nimport ListCases from './components/ListCases.js'\nimport SearchCases from './components/SearchCases.js'\nimport AddNewCase from './components/AddNewCase.js'\nimport EachCase from './components/EachCase.js'\nimport EditEachCase from './components/EditEachCase.js'\nimport NotificationPanel from './components/NotificationPanel.js'\n\n\nexport default class GhostHubBase extends React.Component {\n\n    url_api = \"https://ghost-hub.herokuapp.com\"\n              \n\n    state = {\n        \"displaying\": \"list_cases\",\n        \"case_id\":\"\",\n        \"notification_message\":\"\",\n        \"notification_message_color\":\"\",\n        \"reveal\":\"\"\n    }\n\n\n    displayPanel(){\n\n        let active_display_panel={\n\n            \"list_cases\":<ListCases onEnterEachCase={this.enterEachCase} onServerError={this.server_error} url_api={this.url_api}/>,\n            \"search_cases\":<SearchCases onSearchCases={this.searchCases} onEnterEachCase={this.enterEachCase} onServerError={this.server_error} url_api={this.url_api}/>,\n            \"each_case\":<EachCase onListCases={this.listCases} onEditEachCase={this.editEachCase} onComment={this.comment_notification} onServerError={this.server_error} url_api={this.url_api} case_id={this.state.case_id} />,\n            \"edit_each_case\":<EditEachCase onEnterEachCase={this.enterEachCase} onServerError={this.server_error} url_api={this.url_api} case_id={this.state.case_id} />,\n            \"add_new_case\":<AddNewCase onListCases={this.listCases} onServerError={this.server_error} url_api={this.url_api} />\n            \n               \n        \n        }\n\n\n        return active_display_panel[this.state.displaying]\n    }\n\n    \n\n\n\n    enterEachCase= (notification_content, case_id)=>{\n\n    \n        if (Object.keys(notification_content).length==0){\n\n            this.setState({\n\n                \"displaying\":\"each_case\",\n                \"case_id\":case_id,\n\n            })\n\n\n        }else{\n            if(notification_content.validation){\n                this.setState({\n\n                    \"displaying\":\"each_case\",\n                    \"case_id\":case_id,\n                    \"notification_message\":notification_content.message,\n                    \"notification_message_color\":\"green\",\n                    \"reveal\":\"alert-reveal\"\n\n                })\n            }else{\n                this.setState({\n\n                    \"notification_message\":notification_content.message,\n                    \"notification_message_color\":\"red\",\n                    \"reveal\":\"alert-reveal\"\n\n                })\n            }\n        }\n\n\n    }\n    \n\n\n    editEachCase= (case_id)=>{\n\n     \n        this.setState({\n\n            \"displaying\":\"edit_each_case\",\n            \"case_id\":case_id\n\n\n        })\n\n\n    }\n\n   \n\n\n    listCases=(notification_content)=>{\n\n        if (Object.keys(notification_content).length==0){\n\n            this.setState({\n\n                \"displaying\":\"list_cases\"\n\n            })\n\n\n        }else{\n            if(notification_content.validation){\n                this.setState({\n\n                    \"displaying\":\"list_cases\",\n                    \"notification_message\":notification_content.message,\n                    \"notification_message_color\":\"green\",\n                    \"reveal\":\"alert-reveal\"\n\n                })\n            }else{\n                this.setState({\n\n                    \"notification_message\":notification_content.message,\n                    \"notification_message_color\":\"red\",\n                    \"reveal\":\"alert-reveal\"\n\n                })\n            }\n        }\n\n    }\n\n\n    searchCases=(notification_content)=>{\n\n        if (Object.keys(notification_content).length==0){\n\n            this.setState({\n\n                \"displaying\": \"search_cases\"\n\n            })\n        } else {\n            if(notification_content.validation){\n                this.setState({\n\n                    \"notification_message\":notification_content.message,\n                    \"notification_message_color\":\"green\",\n                    \"reveal\":\"alert-reveal\"\n\n                    })\n            \n            }else{\n\n                this.setState({\n\n                    \"notification_message\":notification_content.message,\n                    \"notification_message_color\":\"red\",\n                    \"reveal\":\"alert-reveal\"\n\n                    })\n\n\n            }\n\n        }\n\n\n\n    }\n\n\n    addNewCase= ()=>{\n\n        this.setState({\n            \"displaying\":'add_new_case'\n        })\n\n    }\n\n\n    comment_notification=(notification_content)=>{\n\n        \n        if(notification_content.validation){\n            this.setState({\n\n                \"notification_message\":notification_content.message,\n                \"notification_message_color\":\"green\",\n                \"reveal\":\"alert-reveal\"\n\n                })\n        \n        }else{\n\n            this.setState({\n\n                \"notification_message\":notification_content.message,\n                \"notification_message_color\":\"red\",\n                \"reveal\":\"alert-reveal\"\n\n                })\n\n\n        }\n          \n\n\n\n    }\n\n\n\n    \n\n    notification_panel_dissapear=()=>{\n\n        this.setState({\n            \"reveal\":\"\"\n        })\n\n    }\n    \n\n    server_error=(notification_content)=>{\n\n\n        \n            this.setState({\n\n                \"notification_message\":notification_content.message,\n                \"notification_message_color\":\"light blue\",\n                \"reveal\":\"alert-reveal\"\n\n                })\n        \n        \n          \n    }\n\n\n    render(){\n\n        \n\n        return(\n            <React.Fragment>\n            <NotificationPanel className_reveal={this.state.reveal} message={this.state.notification_message} color={this.state.notification_message_color} onClickPanelDissappear={this.notification_panel_dissapear}/>\n            <ul className=\"nav nav-tabs\">\n                <li className=\"nav-item\">\n                <button className={(this.state.displaying === 'list_cases') ? 'nav-link active' : 'nav-link'} onClick={()=>{this.listCases({})}}>List Cases</button>\n                </li>\n                <li className=\"nav-item\">\n                <button className={(this.state.displaying === 'search_cases') ? 'nav-link active' : 'nav-link'} onClick={()=>this.searchCases({})}>Search Case</button>\n                </li>\n                <li className=\"nav-item\">\n                <button className={(this.state.displaying === 'add_new_case') ? 'nav-link active' : 'nav-link'} onClick={this.addNewCase}>Add Case</button>\n                </li>\n                <li className=\"nav-item\">\n                    <button className=\"nav-link\">About Us</button>\n                </li>               \n            </ul>\n            {this.displayPanel()}\n        </React.Fragment>\n        )\n\n\n\n\n    }\n\n\n\n}","import 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport GhostHubBase from \"./GhostHubBase.js\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <GhostHubBase/>\n    </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}